@model NivoModel
@inject IWorkContext workContext

@{
    Layout = null;

    Html.AddScriptParts(ResourceLocation.Footer, "~/Plugins/SevenSpikes.Nop.Plugins.AnywhereSliders/Scripts/AnywhereSliders.min.js");

    //TODO: UPGRADE 4.0 check this!
    // Check for IE 8
    var userAgent = Url.ActionContext.HttpContext.Request.Headers["User-Agent"];
    if (!String.IsNullOrEmpty(userAgent) && userAgent.ToString().ToLower().IndexOf("MSIE 8.0", StringComparison.InvariantCultureIgnoreCase) > 0)
    {
        Html.AppendCssFileParts("~/Plugins/SevenSpikes.Nop.Plugins.AnywhereSliders/Styles/nivo/ie8-fix.css");
    }

    Html.AddCssFileParts("~/Plugins/SevenSpikes.Nop.Plugins.AnywhereSliders/Styles/nivo/nivo-slider.css");
    Html.AddCssFileParts("~/Plugins/SevenSpikes.Nop.Plugins.AnywhereSliders/Themes/" + Model.Theme + "/Content/nivo/nivo.css");

    var supportRtl = workContext.WorkingLanguage.Rtl;
    if (supportRtl)
    {
        Html.AddCssFileParts("~/Plugins/SevenSpikes.Nop.Plugins.AnywhereSliders/Styles/nivo/nivo.rtl.css");
        Html.AddCssFileParts("~/Plugins/SevenSpikes.Nop.Plugins.AnywhereSliders/Themes/" + Model.Theme + "/Content/nivo/nivo.rtl.css");
    }

    string skin = Model.Settings.Theme ?? string.Empty;
    string showCaptionsClass = Model.Settings.ShowCaption ? string.Empty : "no-captions";

    var imagesString = string.Empty;

    foreach (var sliderImage1 in Model.SliderImages)
    {
        imagesString += RenderSliderLine(sliderImage1.PicturePath, sliderImage1.DisplayText, sliderImage1.Alt, Model.Settings.Links, sliderImage1.Url);
    }

    imagesString = imagesString.Replace(Environment.NewLine, string.Empty).Trim();
}

@functions
{
    //Used for nivo slider images in the case when we have more than one image
    public string RenderSliderLine(string pictureUrl, string text, string alt, bool haveLink, string link)
    {
        string sliderLine = string.Empty;

        if (!string.IsNullOrEmpty(pictureUrl))
        {
            if (string.IsNullOrWhiteSpace(alt))
            {
                alt = "slider image";
            }

            if (haveLink && !string.IsNullOrEmpty(link))
            {
                if (Model.Settings.ShowCaption)
                {
                    sliderLine += $"<a href=\"{link}\"><img src=\"{pictureUrl}\" data-thumb=\"{pictureUrl}\" alt=\"{alt}\" title=\"{text}\" /></a>";
                }
                else
                {
                    if (!string.IsNullOrEmpty(text))
                    {
                        text = Regex.Replace(text, @"<[^>]*(>|$)", String.Empty);
                    }

                    sliderLine += $"<a href=\"{link}\" title=\"{text}\"><img src=\"{pictureUrl}\" data-thumb=\"{pictureUrl}\" alt=\"{alt}\" /></a>";
                }
            }
            else
            {
                sliderLine += $"<img src=\"{pictureUrl}\" data-thumb=\"{pictureUrl}\" alt=\"{alt}\" title=\"{text}\" />";
            }
        }

        return sliderLine;
    }

    //Used when we have only one image, so that we do not initialize the nivo slider, but just display the image.
    //Used this helper also when we have a slider with more than one image so that we first render the first image and on document ready initialize the nivo slider.
    //Thus there will be no issue on load page - when page is loaded and after that the slider is initialized
    public string RenderSingleSliderImageLine(SliderImageModel sliderImage)
    {
        string singleSliderImageLine = string.Empty;

        var alt = String.IsNullOrEmpty(sliderImage.Alt) ? "banner" : sliderImage.Alt;
        var strippedDisplayText = sliderImage.DisplayText;

        if (!string.IsNullOrEmpty(strippedDisplayText))
        {
            strippedDisplayText = Regex.Replace(strippedDisplayText, @"<[^>]*(>|$)", String.Empty);
        }

        if (Model.Settings.Links && !String.IsNullOrEmpty(sliderImage.Url))
        {
            if (Model.Settings.ShowCaption)
            {
                singleSliderImageLine += $"<a href=\"{sliderImage.Url}\"><img class=\"nivo-main-image\" src=\"{sliderImage.PicturePath}\" alt=\"{alt}\" /></a>";
            }
            else
            {
                singleSliderImageLine += $"<a href=\"{sliderImage.Url}\" title=\"{strippedDisplayText}\"><img class=\"nivo-main-image\" src=\"{sliderImage.PicturePath}\" alt=\"{alt}\" /></a>";
            }
        }
        else
        {
            singleSliderImageLine += $"<img class=\"nivo-main-image\" src=\"{sliderImage.PicturePath}\" alt=\"{alt}\" title=\"{strippedDisplayText}\" />";
        }

        singleSliderImageLine += $"<div class=\"nivo-caption\" style=\"display: block;\">{Html.Raw(sliderImage.DisplayText)}</div>";

        return singleSliderImageLine;
    }
}

<div class="slider-wrapper anywhere-sliders-nivo-slider theme-@skin @showCaptionsClass"
     data-imagesCount="@Model.SliderImages.Count"
     data-sliderHtmlElementId="@Model.SliderHtmlElementId"
     data-imagesString="@imagesString"
     data-effect="@Model.Settings.Effect"
     data-slices="@Model.Settings.Slices"
     data-boxCols="@Model.Settings.BoxCols"
     data-boxRows="@Model.Settings.BoxRows"
     data-animSpeed="@Model.Settings.AnimationSpeed"
     data-pauseTime="@Model.Settings.AutoSlideInterval"
     data-directionNav="@Model.Settings.EnableDirectionNavigation.ToString().ToLowerInvariant()"
     data-controlNav="@Model.Settings.EnableControlNavigation.ToString().ToLowerInvariant()"
     data-controlNavThumbs="@Model.Settings.EnableControlNavigationThumbs.ToString().ToLowerInvariant()"
     data-pauseOnHover="@Model.Settings.PauseOnHover.ToString().ToLowerInvariant()"
     data-prevText="@Model.Settings.PrevText"
     data-nextText="@Model.Settings.NextText">

    @if (Model.SliderImages.Count == 1)
    {
        @Html.Raw(RenderSingleSliderImageLine(Model.SliderImages[0]));
     }
     else
     {
         // add javascript
         Html.AddScriptParts(ResourceLocation.Footer, "~/Plugins/SevenSpikes.Core/Scripts/swipeEvents.min.js");
         Html.AddScriptParts(ResourceLocation.Footer, "~/Plugins/SevenSpikes.Nop.Plugins.AnywhereSliders/Scripts/nivo/jquery.nivo.slider.min.js");

         if (Model.Settings.RandomStart)
         {
             Random r = new Random();
             int randomIndex = r.Next(0, Model.SliderImages.Count - 1);

             // the idea is to reorganize the slider images so that the random becomes the first
             var randomStartSlideModels = new List<SliderImageModel>();
             // take the random start image and all after it
             randomStartSlideModels.AddRange(Model.SliderImages.Skip(randomIndex));
             // take all other images form the beginning to the random start
             randomStartSlideModels.AddRange(Model.SliderImages.Take(randomIndex));

             Model.SliderImages = randomStartSlideModels;
         }

         <div id="@Model.SliderHtmlElementId" class="nivoSlider">
             @Html.Raw(RenderSingleSliderImageLine(Model.SliderImages[0]))
         </div>
     }
</div>