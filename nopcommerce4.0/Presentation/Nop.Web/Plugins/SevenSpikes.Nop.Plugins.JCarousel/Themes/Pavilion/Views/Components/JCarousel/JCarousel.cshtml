@model List<SevenSpikes.Nop.Plugins.JCarousel.Models.JCarouselModel>
@inject IThemeContext themeContext
@inject IWorkContext workContext

@{
    var currentThemeName = themeContext.WorkingThemeName;

    Html.AddCssFileParts("~/Plugins/SevenSpikes.Nop.Plugins.JCarousel/Styles/slick.css");
    Html.AddCssFileParts("~/Plugins/SevenSpikes.Nop.Plugins.JCarousel/Themes/" + currentThemeName + "/Content/JCarousel.css");

    bool supportRtl = workContext.WorkingLanguage.Rtl;

    if (supportRtl)
    {
        Html.AddCssFileParts("~/Plugins/SevenSpikes.Nop.Plugins.JCarousel/Themes/" + currentThemeName + "/Content/JCarousel.rtl.css");
    }

    Html.AddScriptParts(ResourceLocation.Footer, "~/Plugins/SevenSpikes.Core/Scripts/swipeEvents.min.js");
    Html.AddScriptParts(ResourceLocation.Footer, "~/Plugins/SevenSpikes.Nop.Plugins.JCarousel/Scripts/slick.min.js");

    string controllerName = Url.ActionContext.RouteData.Values["controller"].ToString();
    string actionName = Url.ActionContext.RouteData.Values["action"].ToString();
    var isHomePage = controllerName.Equals("home", StringComparison.InvariantCultureIgnoreCase) &&
             actionName.Equals("index", StringComparison.InvariantCultureIgnoreCase);
}

@foreach (var carousel in Model)
{
    if (carousel.Items.Count < 1)
    {
        continue;
    }

    var homePageCategoryClass = string.Empty;

    if (carousel.DataSourceTypeClass == "category-grid")
    {
        if (isHomePage)
        {
            homePageCategoryClass = "home-page-category-grid";
        }
        else
        {
            homePageCategoryClass = "sub-category-grid";
        }
    }

    <script asp-location="Footer">
          $(document).ready(function () {
            var carouselHtmlElementId = "@carousel.Settings.CarouselHtmlElementId";
            var jCarousel = $("#" + carouselHtmlElementId + " .slick-carousel");

            if (jCarousel.length === 0) {
                return;
            }

            var numOfSlidesToScroll = @carousel.Settings.JCarouselEntitySettings.ScrollItems;
            var loopItems = @carousel.Settings.JCarouselEntitySettings.LoopItems.ToString().ToLowerInvariant();
            var pauseOnHover = @carousel.Settings.JCarouselEntitySettings.AutoscrollHoverPause.ToString().ToLowerInvariant();
            var isRtl = @supportRtl.ToString().ToLowerInvariant();
            var autoscrollTimeout = @carousel.Settings.JCarouselEntitySettings.Autoscroll.ToString().ToLowerInvariant();
            var autoscroll = autoscrollTimeout > 0 ? true : false;
            var navigationArrows = @carousel.Settings.JCarouselEntitySettings.NavigationArrows.ToString().ToLowerInvariant();
            var carouselArrowsContainer = "#" + carouselHtmlElementId + " @carousel.NavigationArrowsSelector";
            var navigationDots = @carousel.Settings.JCarouselEntitySettings.NavigationDots.ToString().ToLowerInvariant();
            // TODO: Make a validator for this setting.
            var numberOfVisibleItems = @carousel.Settings.JCarouselEntitySettings.NumberOfVisibleItems < 1 ? 1 : @carousel.Settings.JCarouselEntitySettings.NumberOfVisibleItems;
            var animationSpeedString = '@carousel.Settings.JCarouselEntitySettings.AnimationSpeed';
            var initialSlide = @carousel.Settings.JCarouselEntitySettings.StartIndex - 1;
            var prevArrowHtml = '<button type="button" data-role="none" class="slick-prev" aria-label="Previous" tabindex="0" role="button">@T("SevenSpikes.JCarousel.Public.PreviousArrow")</button>';
            var nextArrowHtml = '<button type="button" data-role="none" class="slick-next" aria-label="Next" tabindex="0" role="button">@T("SevenSpikes.JCarousel.Public.NextArrow")</button>';
            var animationSpeed;

            switch(animationSpeedString) {
            case 'slow':
                animationSpeed = 300;
                break;
            case 'fast':
                animationSpeed = 150;
                break;
            default:
                animationSpeed = 0;
            }

            var responsiveBreakpointsObj = {};

            try {

                responsiveBreakpointsObj = JSON.parse('@Html.Raw(@carousel.ResponsiveBreakpoints)');

                for (var i = 0; i < responsiveBreakpointsObj.length; i++) {
                    if (responsiveBreakpointsObj[i].settings.slidesToShow < numOfSlidesToScroll) {
                        responsiveBreakpointsObj[i].settings.slidesToScroll = responsiveBreakpointsObj[i].settings.slidesToShow;
                    }
                }
            }
            catch (e) {
                console.log('Invalid slick slider responsive breakpoints setting value!');
            }

            jCarousel.on('init', function() {
                $.event.trigger({ type: "newProductsAddedToPageEvent" });
                $(".carousel-title").show();
            });

            jCarousel.slick({
                rtl: isRtl,
                infinite: loopItems,
                slidesToShow: numberOfVisibleItems,
                slidesToScroll: numOfSlidesToScroll,
                dots: navigationDots,
                speed: animationSpeed,
                autoplay: autoscroll,
                autoplaySpeed: autoscrollTimeout * 1000,
                arrows: navigationArrows,
                appendArrows: carouselArrowsContainer,
                cssEase: 'linear',
                respondTo: 'slider',
                edgeFriction: 0.05,
                initialSlide: initialSlide,
                pauseOnHover: pauseOnHover,
                draggable: false,
                prevArrow: prevArrowHtml,
                nextArrow: nextArrowHtml,
                responsive: responsiveBreakpointsObj
            });

           var slidesCount = jCarousel.slick('getSlick').slideCount;

           if (slidesCount > numberOfVisibleItems && navigationArrows) {
               $('#' + carouselHtmlElementId + ' .carousel-title').addClass('has-navigation');
           }
        });
    </script>
    <div id="@carousel.Settings.CarouselHtmlElementId" class="jCarouselMainWrapper @carousel.Settings.JCarouselEntitySettings.Skin">
        <div class="nop-jcarousel @carousel.DataSourceTypeClass @homePageCategoryClass">

            <h2 class="carousel-title">
                @if (!string.IsNullOrEmpty(carousel.Settings.Title) && carousel.Settings.JCarouselEntitySettings.ShowTitle)
                {
                    <span>@carousel.Settings.Title</span>
                }
                else
                {
                    <text>&nbsp</text>
                }
            </h2>

            <div class="slick-carousel item-grid">
                @foreach (var item in carousel.Items)
                {
                    <div class="carousel-item">
                        <div class="item-box">
                            @switch (carousel.DataSourceTypeClass)
                            {
                                case "product-grid":
                                    @await Html.PartialAsync("_ProductBox", item.ProductOverviewModel)
                                    break;
                                case "category-grid":
                                    @await Component.InvokeAsync("JCarouselCategoryBox", item.CategoryModel)
                                    break;
                                case "manufacturer-grid":
                                    @await Component.InvokeAsync("JCarouselManufacturerBox", item.ManufacturerModel)
                                    break;
                                case "vendor-grid":
                                    @await Component.InvokeAsync("JCarouselVendorBox", item.VendorModel)
                                    break;
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}