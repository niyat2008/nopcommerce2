!function (a) { function e() { var b = 0, c = a("#store-scope-configuration"); if (c.length > 0) { var d = c.val().split("?")[1]; if (null != d && (d = d.split("&")[0], null != d)) { var e = d.split("="); "undefined" != typeof e[1] && "storeid" === e[0].toLowerCase() && (b = parseInt(e[1])) } } return b } var b = function (a) { var b = { groupId: a }; return b = addAntiForgeryToken(b) }, c = function (b) { var c = a(".tab-builder-title"); 0 === c.children(".tab-category-title").length && c.append('<span class="tab-category-title"></span>'), c.children(".tab-category-title").text(" (" + b + ")") }, d = function (d) { var e = a(".category-tabs-editor-wrapper"), f = e.children(".category-tabs-editor"); f.empty(), e.show().children(".loader").show(), a.ajax({ url: a(".category-autocomplete-wrapper").attr("data-getProductsGroupTabsUrl"), type: "POST", data: b(d) }).done(function (b) { f.html(b), a.event.trigger({ type: "newProductGroupAddedEvent" }) }).always(function () { var b = a('.sortable[data-productGroupId="' + d + '"]').children("span:first").text(); c(b), e.children(".loader").fadeOut() }) }, f = function (a) { var b = { categoryId: a, storeId: e() }; return b = addAntiForgeryToken(b) }, g = function () { var b = { categoryGroupIds: a("#CategoryGroupIds").val(), storeId: e() }; b = addAntiForgeryToken(b), a.ajax({ url: a(".category-autocomplete-wrapper").attr("data-saveCategoryGroupIdsSettingUrl"), type: "POST", data: b }) }, h = function () { var b = ""; a(".categories-sortable-list span.sortable[data-categoryid]").each(function () { var c = a(this), d = parseInt(c.attr("data-categoryid")) || 0, e = parseInt(c.attr("data-productGroupId")) || 0; b += d + ":" + e, c.next("span.sortable[data-categoryid]").length > 0 && (b += ",") }), a("#CategoryGroupIds").val(b), g() }, i = function (b) { var c = a(b), d = parseInt(c.attr("data-categoryId")) || 0; a('.categories-sortable-list span[data-categoryId="' + d + '"]').length > 0 || (c.addClass("sortable"), c.append('<span class="edit-item-button" title="Edit"><i class="fa fa-pencil" aria-hidden="true"></i></span>'), c.append('<span class="remove-category-item remove-item-button" title="Remove"><i class="fa fa-times" aria-hidden="true"></i></span>'), a.ajax({ url: a(".category-autocomplete-wrapper").attr("data-createProductsGroupUrl"), type: "POST", data: f(d) }).done(function (b) { a('.categories-sortable-list span[data-categoryId="' + d + '"]').attr("data-productGroupId", b.toString()), a('.categories-sortable-list span[data-productgroupid="' + b + '"] .edit-item-button').click() }).always(function () { h() }), a(".categories-sortable-list").append(c)) }, j = function () { var b = { categoryName: a("#choose-category-autocomplete").val() || "" }; return b = addAntiForgeryToken(b) }, k = function (b, c) { 0 !== a("#" + b).length && (a("#" + b).is(":checked") ? a(".overlay-for-" + b).remove() : a(c).append('<div class="custom-fields-overlay overlay-for-' + b + '"></div>')) }, l = function (b, c) { var d = a(c); "static" === d.css("position") && d.css("position", "relative"), a("#" + b).change(function () { k(b, c) }), k(b, c) }; a(document).ready(function () { a("#choose-category-autocomplete").kendoAutoComplete({ dataTextField: "name", filter: "contains", highlightFirst: !0, dataSource: { serverFiltering: !0, transport: { read: { url: a(".category-autocomplete-wrapper").attr("data-getCategoriesUrl"), dataType: "json", data: j } } }, template: kendo.template(a("#categoriesSortingTemplate").html()), change: function () { var b = a("#choose-category-autocomplete_listbox .k-state-selected").html(); this.value(""), i(b), h() } }), a(".categories-sortable-list").kendoSortable({ filter: "span.sortable", container: a(".categories-sortable-list"), hint: function (b) { return a('<div class="sortable-categories-drag-drop-hint">' + b.html() + "</div>") }, change: h }), a(".categories-sortable-list").on("click", ".remove-category-item", function () { var b = a(this).closest(".sortable[data-categoryid]"); b.is(".active") && a(".category-tabs-editor-wrapper").hide(), b.remove(), h() }), a(".categories-sortable-list").on("click", ".edit-item-button", function () { var b = a(this).closest(".sortable[data-categoryid]"), c = b.attr("data-productGroupId"); b.addClass("active").siblings(".sortable").removeClass("active"), d(c) }), a(".store-scope-configuration .checkbox input").change(function () { l("CategoryGroupIds_OverrideForStore", ".choosed-categories-holder") }), l("CategoryGroupIds_OverrideForStore", ".choosed-categories-holder") }) }(jQuery);