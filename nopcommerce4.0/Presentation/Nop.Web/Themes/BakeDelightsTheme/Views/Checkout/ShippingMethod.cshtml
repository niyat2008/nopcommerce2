@model CheckoutShippingMethodModel

@{
    Layout = "_ColumnsOne";

    //title
    Html.AddTitleParts(T("PageTitle.Checkout").Text);
    //page class
    Html.AppendPageCssClassParts("html-checkout-page");
    Html.AppendPageCssClassParts("html-shipping-method-page");
}
@await Component.InvokeAsync("CheckoutProgress", new { step = CheckoutProgressStep.Shipping })
<div class="page checkout-page shipping-method-page">
    <div class="page-title panel-heading">
        <h1>@T("Checkout.SelectShippingMethod")</h1>
    </div>
    <div class="page-body checkout-data">
        <div class="section shipping-method">
            <form asp-route="CheckoutShippingMethod" method="post">
                @await Component.InvokeAsync("Widget", new { widgetZone = "checkout_shipping_method_top" })
                @if (Model.Warnings.Count == 0)
                {
                <ul class="method-list">
                    @for (var i = 0; i < Model.ShippingMethods.Count; i++)
                        {
                            var shippingMethod = Model.ShippingMethods[i];
                        <li>
                            <div class="method-name">
                                <label class="radio" for="shippingoption_@(i)">
                                    <input id="shippingoption_@(i)" type="radio" name="shippingoption" value="@(shippingMethod.Name)___@(shippingMethod.ShippingRateComputationMethodSystemName)" checked="@shippingMethod.Selected" />
                                    @shippingMethod.Name (@shippingMethod.Fee)
                                </label>
                                @if (!string.IsNullOrEmpty(shippingMethod.Description))
                                    {
                                    <div class="method-description">
                                        @Html.Raw(shippingMethod.Description)
                                    </div>
                                    }
                            </div>

                        </li>
                        }
                </ul>
                if (Model.NotifyCustomerAboutShippingFromMultipleLocations)
                {
                <div class="multiple-locations">
                    @T("Checkout.ShippingMethod.ShippingFromMultipleLocations")
                </div>
                }
                <div class="form-group row next-btn-wrapper">
                    <div class="col-md-12">
                        <input type="submit" name="nextstep" value="@T("Checkout.NextButton")" class="btn btn-primary shipping-method-next-step-button" />
                    </div>
                </div>
                }
                else
                {
                <div class="message-error">
                    <ul>
                        @foreach (var warning in Model.Warnings)
                            {
                            <li>@warning</li>
                            }
                    </ul>
                </div>
                }
                @await Component.InvokeAsync("Widget", new { widgetZone = "checkout_shipping_method_bottom" })
            </form>
        </div>
        <div class="section order-summary-body">
            <div class="title small-heading">
                <strong>@T("Checkout.OrderSummary")</strong>
            </div>
            @await Component.InvokeAsync("OrderSummary")
        </div>
    </div>
</div>
