@model FooterModel
@using Nop.Core
@using Nop.Core.Domain.Tax
@inject IWorkContext workContext;
<div class="footer">
    <div class="footer-upper">
        <div class="container">
            <div class="row">
                <div class="column newsletter-wrapper col-sm-12 col-md-12">
                    @await Component.InvokeAsync("NewsletterBox")
                </div>              
            </div>
        </div>
    </div>
    <div class="footer-middle">
        <div class="container">
            <div class="row">
                <div class="column my-account col-sm-3 col-md-3">
                    <div class="title">
                        <strong>@T("Footer.MyAccount")</strong>
                    </div>
                    <ul class="nav nav-list">
                        <li><a href="@Url.RouteUrl("CustomerInfo")">@T("Account.MyAccount")</a></li>
                        <li><a href="@Url.RouteUrl("CustomerOrders")">@T("Account.CustomerOrders")</a></li>
                        <li><a href="@Url.RouteUrl("CustomerAddresses")">@T("Account.CustomerAddresses")</a></li>
                        @if (Model.ShoppingCartEnabled)
                        {
                            <li><a href="@Url.RouteUrl("ShoppingCart")">@T("ShoppingCart")</a></li>
                        }
                        @if (Model.WishlistEnabled)
                        {
                            <li><a href="@Url.RouteUrl("Wishlist")">@T("Wishlist")</a></li>
                        }
                        @foreach (var topic in Model.Topics.Where(x => x.IncludeInFooterColumn3).ToList())
                        {
                            <li><a href="@Url.RouteUrl("Topic", new { SeName = topic.SeName })">@topic.Name</a></li>
                        }
                    </ul>
                </div>
                <div class="column customer-service col-sm-3 col-md-3">
                    <div class="title">
                        <strong>@T("Footer.CustomerService")</strong>
                    </div>
                    <ul class="nav nav-list">
                        @if (Model.NewsEnabled)
                        {
                                <li><a href="@Url.RouteUrl("NewsArchive")">@T("News")</a></li>
                        }
                        @if (Model.BlogEnabled)
                        {
                                <li><a href="@Url.RouteUrl("Blog")">@T("Blog")</a></li>
                        }
                        @if (Model.ForumEnabled)
                        {
                                <li><a href="@Url.RouteUrl("Boards")">@T("Forum.Forums")</a></li>
                        }
                        @foreach (var topic in Model.Topics.Where(x => x.IncludeInFooterColumn2).ToList())
	                    {
                                <li><a href="@Url.RouteUrl("Topic", new { SeName = topic.SeName })">@topic.Name</a></li>
                        }
                        @if (Model.SitemapEnabled)
                        {
                            <li><a href="@Url.RouteUrl("Sitemap")">@T("Sitemap")</a></li>
                        }
                        @if (Model.RecentlyViewedProductsEnabled)
                        {
                            <li><a href="@Url.RouteUrl("RecentlyViewedProducts")">@T("Products.RecentlyViewedProducts")</a></li>
                        }
                        @if (Model.CompareProductsEnabled)
                        {
                            <li><a href="@Url.RouteUrl("CompareProducts")">@T("Products.Compare.List")</a></li>
                        }
                        @if (Model.NewProductsEnabled)
                        {
                            <li><a href="@Url.RouteUrl("NewProducts")">@T("Products.NewProducts")</a></li>
                        }
                        <li><a href="@Url.RouteUrl("ContactUs")">@T("ContactUs")</a></li>
                    </ul>
                </div>
                <div class="column information col-sm-3 col-md-3">
                    <div class="title">
                        <strong>@T("Footer.Information")</strong>
                    </div>
                    <ul class="nav nav-list">
                        @foreach (var topic in Model.Topics.Where(x => x.IncludeInFooterColumn1).ToList())
                        {
                            <li><a href="@Url.RouteUrl("Topic", new { SeName = topic.SeName })">@topic.Name</a></li>
                        }
                        @if (Model.AllowCustomersToApplyForVendorAccount)
                        {
                            <li><a href="@Url.RouteUrl("ApplyVendorAccount")">@T("Vendors.ApplyAccount")</a></li>
                        }
                        <li><a href="@Url.RouteUrl("ProductSearch")">@T("Search")</a> </li>
                    </ul>
                </div>
                <div class="column contact-wrapper col-sm-3 col-md-3">
                    <div class="title">                        
                        <strong>@T("Footer.FollowUs")</strong>
                    </div>
                    @await Component.InvokeAsync("SocialButtons")
                    <div class="payment-method">
                        <div class="title">                            
                            <strong>Payment Methods</strong>
                        </div>
                        <ul class="nav nav-list">
                            <li class="payment-method"></li>
                            <li class="payment-method2"></li>
                            <li class="payment-method3"></li>
                            <li class="payment-method4"></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="footer-lower">
        <div class="container">
            <div class="row">
                <div class="col-xs-12 col-sm-5 col-md-5">
                    <div class="footer-information">
                        @if (Model.DisplayTaxShippingInfoFooter)
                        {
                            var inclTax = workContext.TaxDisplayType == TaxDisplayType.IncludingTax;
                            <span class="footer-tax-shipping">
                                @T(inclTax ? "Footer.TaxShipping.InclTax" : "Footer.TaxShipping.ExclTax", Url.RouteUrl("Topic", new { SeName = Html.GetTopicSeName("shippinginfo") }))
                            </span>
                        }
                    </div>
                    @if (!Model.HidePoweredByNopCommerce)
                    {
                        <div class="poweredby">
                            @*Would you like to remove the "Powered by nopCommerce" link in the bottom of the footer?
                            Please find more info at https://www.nopcommerce.com/copyrightremoval.aspx*@
                            Powered by <a target="_blank" href="https://www.nopcommerce.com/">nopCommerce</a>
                        </div>
                    }   
                    <div class="footer-disclaimer">
                        @T("Content.CopyrightNotice", DateTime.Now.Year.ToString(), Model.StoreName)
                    </div>                 
                </div>                
                <div class="col-xs-12 col-sm-3 col-md-3 footer-store-theme">                    
                    @await Component.InvokeAsync("StoreThemeSelector")
                </div>
                <div class="col-xs-12 col-sm-4 col-md-4">
                    <div class="designedby pull-right">
                        <div class="footer-theme-credit"><a href="http://themes.nopaccelerate.com/themes/bakedelights-nopcommerce-theme/" target="_blank" title="Responsive Bake Delights Theme for nopCommerce">Bake Delights Theme</a></div>
                        <div class="footer-designedby">Theme by <a target="_blank" href="http://www.nopaccelerate.com/">nopAccelerate</a></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    @await Component.InvokeAsync("Widget", new { widgetZone = "footer" })
</div>

