@model CheckoutShippingAddressModel
@using Nop.Web.Models.Checkout;
@{
    Layout = "~/Views/Shared/_ColumnsOne.cshtml";

    //title
    Html.AddTitleParts(T("PageTitle.Checkout").Text);
}
@Html.Action("CheckoutProgress", "Checkout", new { step = CheckoutProgressStep.Address })

<div class="billing_address_wrapper">
    <div class="row">
        <div class="col-lg-12">
<div class="form-panel">
    <div class="area-title">
        <h2>@T("Checkout.ShippingAddress")</h2>
    </div>
    <div class="billing_address_body">
        <div class="row">
            @if (Model.ExistingAddresses.Count > 0)
            {  
                <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12  cart-box-wr">
				<div class="left_wrapper_billing">
                    <div class="box-heading footer-title">
                        <h2>@T("Checkout.SelectShippingAddress")</h2>
                    </div>
                    @foreach (var item in Model.ExistingAddresses)
                    {  
					<div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
                        <div class="coupon-box offer offer-default">
                            <div class="title">
                                <strong>@item.FirstName @item.LastName</strong>
                            </div>
    
                            <div class="hint">
                                <div class="">@T("Address.Fields.Email"): @item.Email</div>
                                @if (item.PhoneEnabled)
                                {
                                    <div class="phone">
                                        @T("Address.Fields.PhoneNumber"):
                                        @item.PhoneNumber
                                    </div>
                                }
                                @if (item.FaxEnabled)
                                {
                                    <div class="fax">
                                        @T("Address.Fields.FaxNumber"):
                                        @item.FaxNumber
                                    </div>
                                }
                                @if (item.CompanyEnabled && !String.IsNullOrEmpty(item.Company))
                                {
                                    <div class="company">
                                        @item.Company
                                    </div>
                                }
                                @if (item.StreetAddressEnabled)
                                {
                                    <div class="address1">
                                        @item.Address1
                                    </div>
                                }
                                @if (item.StreetAddress2Enabled && !String.IsNullOrEmpty(item.Address2))
                                {
                                    <div class="address2">
                                        @item.Address2
                                    </div>
                                }
                                @if (item.CityEnabled || item.StateProvinceEnabled || item.ZipPostalCodeEnabled)
                                {
                                    <div class="city-state-zip">
                                        @if (item.CityEnabled)
                                        {
                                            @item.City
                                        }
                                        @if (item.CityEnabled && (item.StateProvinceEnabled || item.ZipPostalCodeEnabled))
                                        {
                                            <text>,</text>
                                        }
                                        @if (item.StateProvinceEnabled)
                                        {
                                            @item.StateProvinceName
                                        }
                                        @if (item.ZipPostalCodeEnabled)
                                        {
                                            @item.ZipPostalCode
                                        }
                                    </div>
                                }
                                @if (item.CountryEnabled && !String.IsNullOrEmpty(item.CountryName))
                                {
                                    <div class="country">
                                        @item.CountryName
                                    </div>
                                }
                            </div>

                            <div class="coupon-code">
                                <input type="button" value="@T("Checkout.ShipToThisAddress")" class="btn btn-default bill_ship_address_btn"  onclick=" setLocation('@Url.RouteUrl("CheckoutSelectShippingAddress", new { addressId = item.Id })') " />
                            </div>
                        </div>

                      </div>                       
                    }
                    
                </div>
				</div>
  
            }
            @if (Model.ExistingAddresses.Count > 0)
            {
                @:<div class="col-lg-6 col-md-6 col-sm-6 col-xs-12 box-block">
            }else{
                @:<div class="col-lg-12 box-block">
            }
        <div class="right_wrapper_billing">
            <div class="box-heading footer-title">
                <h2>@(Model.ExistingAddresses.Count > 0 ? T("Checkout.OrEnterNewAddress") : T("Checkout.EnterShippingAddress"))</h2>
            </div>
            <div class="offer offer-default">
               <div class="box-content">
                    <div class="feature-box">
                        @using (Html.BeginRouteForm("CheckoutShippingAddress", FormMethod.Post))
                        {
                             if (Model.AllowPickUpInStore && !Model.PickUpInStoreOnly && Model.PickupPoints.Any())
            {
                    <div class="section pickup-in-store">
                    <div class="selector">
                        @Html.CheckBoxFor(x => x.PickUpInStore)
                        <label for="@Html.FieldIdFor(model => model.PickUpInStore)">@T("Checkout.PickupPoints").Text</label>
                    </div>
                    <div class="description">
                        @T("Checkout.PickupPoints.Description")
                    </div>
                    <script type="text/javascript">
                        $(document).ready(function () {
                            $("#@Html.FieldIdFor(model => model.PickUpInStore)").change(togglePickUpInStore);
                            togglePickUpInStore();
                        });

                        function togglePickUpInStore() {
                            if ($('#@Html.FieldIdFor(model => model.PickUpInStore)').is(':checked')) {
                                $('#pickup-points-form').show();
                                $('#shipping-addresses-form').hide();
                            } else {
                                $('#pickup-points-form').hide();
                                $('#shipping-addresses-form').show();
                            }
                        }
                    </script>
                </div>
            }

            if (Model.AllowPickUpInStore)
            {
                <div class="section pickup-points" id="pickup-points-form">
                    @if (Model.PickupPoints.Any())
                    {
                        if (Model.PickUpInStoreOnly)
                        { 
                            @Html.HiddenFor(x => x.PickUpInStore)
                        }
                        <div class="select-pickup-point">
                            @if (Model.PickupPoints.Count == 1)
                            {
                                var point = Model.PickupPoints.First();
                                @Html.Hidden("pickup-points-id", string.Format("{0}___{1}", point.Id, point.ProviderSystemName))
                                <ul>
                                    <li class="single-pickup-point name">@point.Name</li>
                                    <li class="single-pickup-point address">@(string.Format("{0} {1} {2}", point.Address, point.City, point.CountryName))</li>
                                    @if (!string.IsNullOrEmpty(point.PickupFee))
                                    {
                                        <li class="single-pickup-point fee">@point.PickupFee</li>
                                    }
                                </ul>
                            }
                            else
                            {
                                <div class="title">
                                    <strong>@T("Checkout.PickupPoints.SelectPickupPoint")</strong>
                                </div>
                                <select name="pickup-points-id" id="pickup-points-select" class="address-select" title="">
                                    @foreach (var point in Model.PickupPoints)
                                    {
                                        var addressLine = new System.Text.StringBuilder();
                                        addressLine.Append(point.Name);
                                        if (!string.IsNullOrEmpty(point.Address))
                                        {
                                            addressLine.AppendFormat(", {0}", point.Address);
                                        }
                                        if (!string.IsNullOrEmpty(point.City))
                                        {
                                            addressLine.AppendFormat(", {0}", point.City);
                                        }
                                        if (!string.IsNullOrEmpty(point.CountryName))
                                        {
                                            addressLine.AppendFormat(", {0}", point.CountryName);
                                        }
                                        if (!string.IsNullOrEmpty(point.PickupFee))
                                        {
                                            addressLine.AppendFormat(", {0}", point.PickupFee);
                                        }
                                        <option value="@(string.Format("{0}___{1}", point.Id, point.ProviderSystemName))">@(addressLine)</option>
                                    }
                                </select> 
                            }
                        </div>
						
                        if(Model.DisplayPickupPointsOnMap)
                        {
                            var src = string.Format("https://maps.googleapis.com/maps/api/js{0}", string.IsNullOrEmpty(Model.GoogleMapsApiKey) ? string.Empty : string.Format("?key={0}", Model.GoogleMapsApiKey));
                            <div class="pickup-points-map" id="map">
                                <script type="text/javascript">
                                    var markers = new Map();
                                    var googleMap = null;
                                    $(document).ready(function () {
                                        $.getScript("@src", function( data, textStatus, jqxhr ) {
                                            google.maps.visualRefresh = true;
                                            googleMap = new google.maps.Map(document.getElementById("map"), {
                                                zoom: 15,
                                                mapTypeId: google.maps.MapTypeId.ROADMAP
                                            });
                                            var geocoder = new google.maps.Geocoder();
                                            var infowindow = new google.maps.InfoWindow();
                                            @for (var i = 0; i < Model.PickupPoints.Count; i++)
                                            {
                                                var point = Model.PickupPoints[i];
                                                var value = string.Format("{0}___{1}", point.Id, point.ProviderSystemName);
                                                var pickupPointInfo = Html.Raw(string.Format(@"<div class='pickup-point-info'><ul><li><strong>{0}</strong></li><li>{1}</li><li>{2}</li></ul></div>",
                                                    point.Name, point.OpeningHours, point.PickupFee));
                                                if (point.Latitude != null && point.Longitude != null)
                                                {
                                                    <text>
                                                        var marker = new google.maps.Marker({
                                                            map: googleMap,
                                                            title: "@point.Name",
                                                            position: new google.maps.LatLng(@point.Latitude, @point.Longitude),
                                                            icon: "http://maps.google.com/mapfiles/ms/icons/blue-dot.png"
                                                        });
                                                        markers.set("@value", marker);
                                                        google.maps.event.addListener(marker, 'click', function () {
                                                            $('#pickup-points-select').val("@value")
                                                            infowindow.setContent("@pickupPointInfo");
                                                            infowindow.open(googleMap, marker);
                                                        });
                                                        @if (i == 0)
                                                        {
                                                            <text>googleMap.setCenter(marker.getPosition())</text>
                                                        }
                                                    </text>
                                                }
                                                else
                                                {
                                                    var address = string.Format("{0} {1} {2} {3}", point.Address, point.City, point.ZipPostalCode, point.CountryName);
                                                    <text>
                                                        geocoder.geocode({'address': "@address"}, function(results, status) {
                                                            if (status === google.maps.GeocoderStatus.OK) {
                                                                var marker = new google.maps.Marker({
                                                                    map: googleMap,
                                                                    title: "@point.Name",
                                                                    position: results[0].geometry.location,
                                                                    icon: "http://maps.google.com/mapfiles/ms/icons/blue-dot.png"
                                                                });
                                                                markers.set("@value", marker);
                                                                google.maps.event.addListener(marker, 'click', function () {
                                                                    $('#pickup-points-select').val("@value")
                                                                    infowindow.setContent("@pickupPointInfo");
                                                                    infowindow.open(googleMap, marker);
                                                                });
                                                                @if (i == 0)
                                                                {
                                                                    <text>googleMap.setCenter(marker.getPosition())</text>
                                                                }
                                                            };
                                                        });
                                                    </text>
                                                }
                                            }
                                        
                                            $('#pickup-points-select').change(function() {
                                                new google.maps.event.trigger(markers.get(this.value), 'click' );
                                            });

                                            $("#@Html.FieldIdFor(model => model.PickUpInStore)").change(function() {
                                                if ($('#@Html.FieldIdFor(model => model.PickUpInStore)').is(':checked')) {
                                                    var center = googleMap.getCenter();
                                                    google.maps.event.trigger(googleMap, 'resize');
                                                    googleMap.setCenter(center);
                                                }
                                            })
                                        })
                                    })
                                </script>
                            </div>
                        }
                    }
                    <div class="message-error">
                        <ul>
                            @foreach (var warning in Model.Warnings)
                            {
                                <li>@warning</li>
                            }
                        </ul>
                    </div>
                </div>
            }
                            
                            <div class="">
                                @{
                                    var dataDictAddress = new ViewDataDictionary();
                                    //Merge ModelState (required for validation)
                                    dataDictAddress.ModelState.Merge(ViewData.ModelState);
                                    dataDictAddress.TemplateInfo.HtmlFieldPrefix = "NewAddress";
                                    @Html.Partial("_CreateOrUpdateAddress", Model.NewAddress, dataDictAddress)              
                                }
                            </div>
							<div class="form-group">
								<div class="col-lg-3 col-md-3 col-sm-3 col-xs-3"></div>
								<div class="col-lg-9 col-md-9 col-sm-9 col-xs-9">
									<input type="submit" name="nextstep" value="@T("Checkout.NextButton")" class="btn btn-default new_addres_next_btn" />
								</div>
							</div>
                        }
                    </div>

                </div>
            </div>


        
            @if (Model.ExistingAddresses.Count > 0)
            {
                @:</div>
            }else{
                @:</div>
            }
        </div>
		</div>
        <div class="row">
        
            <div class="col-lg-12 box-block">
                <div class="box-heading">
                    <h4>@T("Checkout.OrderSummary")</h4>
                </div>
				<div class="row">
					<div class="box-content">
						@Html.Action("OrderSummary", "ShoppingCart")
					</div>
				</div>
			</div>
        </div>

    </div>
</div>



        </div>
    </div>
</div>




