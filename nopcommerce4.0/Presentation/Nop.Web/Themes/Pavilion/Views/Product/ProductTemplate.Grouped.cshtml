@model ProductDetailsModel
@using Microsoft.AspNetCore.Http.Extensions
@using Nop.Core.Domain.Seo
@using Nop.Core.Domain.Catalog;

@inject SeoSettings seoSettings
@inject CatalogSettings catalogSettings

@{
    Layout = "_ColumnsOne";

    //title
    Html.AddTitleParts(!String.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    //meta
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    Html.AppendPageCssClassParts("html-product-details-page");

    var showShareButton = catalogSettings.ShowShareButton;

    //canonical URL
    if (seoSettings.CanonicalUrlsEnabled)
    {
        var productUrl = Url.RouteUrl("Product", new { SeName = Model.SeName }, this.Url.ActionContext.HttpContext.Request.Scheme);
        Html.AddCanonicalUrlParts(productUrl, seoSettings.QueryStringInCanonicalUrlsEnabled);
    }

    //open graph META tags
    if (seoSettings.OpenGraphMetaTags)
    {
        Html.AddHeadCustomParts("<meta property=\"og:type\" content=\"product\" />");
        Html.AddHeadCustomParts("<meta property=\"og:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:description\" content=\"" + Html.Encode(Nop.Core.Html.HtmlHelper.StripTags(Model.MetaDescription)) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:url\" content=\"" + this.Url.ActionContext.HttpContext.Request.GetEncodedUrl() + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:site_name\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
    }

    //Twitter META tags
    if (seoSettings.TwitterMetaTags)
    {
        Html.AddHeadCustomParts("<meta property=\"twitter:card\" content=\"summary\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:site\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:description\" content=\"" + Html.Encode(Nop.Core.Html.HtmlHelper.StripTags(Model.MetaDescription)) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:url\" content=\"" + this.Url.ActionContext.HttpContext.Request.GetEncodedUrl() + "\" />");
    }
}
<!--product breadcrumb-->
@section Breadcrumb
{
    @await Html.PartialAsync("_ProductBreadcrumb", Model.Breadcrumb)
}
@await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_after_breadcrumb", additionalData = Model.Id })
<div class="page product-details-page group-product">
    <div class="page-body">
        @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_top", additionalData = Model.Id })
        <form asp-route="Product" asp-route-sename="@Model.SeName" method="post" id="product-details-form">
            <div itemscope itemtype="http://schema.org/Product" data-productid="@Model.Id">
                <div class="product-essential">
                    @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_before_pictures", additionalData = Model.Id })
                    @{
                        var cloudZoom = await Component.InvokeAsync("Widget", new { widgetZone = "sevenspikes_cloud_zoom" });
                    }
                    @if (!String.IsNullOrEmpty(cloudZoom.ToHtmlString()))
                    {
                        @cloudZoom
                    }
                    else
                    {
                    	@await Html.PartialAsync("_ProductDetailsPictures", Model)
                    }
                    @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_after_pictures", additionalData = Model.Id })
                    <div class="overview">
                        @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_overview_top", additionalData = Model.Id })
                        @await Html.PartialAsync("_Discontinued", Model)
                        <!--manufacturers-->
                        @await Html.PartialAsync("_ProductManufacturers", Model.ProductManufacturers)
                        <div class="product-name">
                            <h1 itemprop="name">
                                @Model.Name
                            </h1>
                        </div>
                        <!--reviews-->
						@await Html.PartialAsync("_ProductReviewOverview", Model.ProductReviewOverview)
                        @if (!String.IsNullOrEmpty(Model.ShortDescription))
                        {
                            <div class="short-description">
                                @Html.Raw(Model.ShortDescription)
                            </div>
                        }
                        <!--compare, email a friend-->
                        <div class="overview-buttons">
                            @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_inside_overview_buttons_before", additionalData = Model.Id })
                            @await Html.PartialAsync("_CompareProductsButton", Model)
                            @await Html.PartialAsync("_ProductEmailAFriendButton", Model)
                            @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_inside_overview_buttons_after", additionalData = Model.Id })
                        </div>
                        <!--sharing-->
                        @if (showShareButton)
                        {
                            @await Html.PartialAsync("_ShareButton", Model)
                        }
                        @if (!String.IsNullOrEmpty(Model.FullDescription))
                        {
                            <div class="full-description" itemprop="description">
                                @Html.Raw(Model.FullDescription)
                            </div>
                        }
                        @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_overview_bottom", additionalData = Model.Id })
                    </div>
                </div>

                <!--associated products-->
                <div class="product-variant-list">
                    @foreach (var variant in Model.AssociatedProducts)
                    {
                        <div class="product-variant-line" data-productid="@variant.Id">
                            @if (!String.IsNullOrWhiteSpace(variant.DefaultPictureModel.ImageUrl))
                            {
                                <div class="variant-picture">
                                    <img alt="@variant.DefaultPictureModel.AlternateText" src="@variant.DefaultPictureModel.ImageUrl"
                                         title="@variant.DefaultPictureModel.Title" id="main-product-img-@variant.Id" />
                                </div>
                            }
                            <div class="variant-overview">
                                @if (!String.IsNullOrWhiteSpace(variant.Name))
                                {
                                    <div class="variant-name">
                                        @variant.Name
                                    </div>
                                }
                                <!--availability-->
                                @await Html.PartialAsync("_Availability", variant)
                                <!--price-->
                                @{
                                	var dataDictPrice = new ViewDataDictionary(ViewData);
                                    dataDictPrice.TemplateInfo.HtmlFieldPrefix = $"price_{variant.Id}";
                                    @await Html.PartialAsync("_ProductPrice", variant.ProductPrice, dataDictPrice)
                                }
                                <!--rental info-->
                                @{
	                                var dataDictRental = new ViewDataDictionary(ViewData);
                                    dataDictRental.TemplateInfo.HtmlFieldPrefix = $"rental_{variant.Id}";
                                    @await Html.PartialAsync("_RentalInfo", variant, dataDictRental)
                                }
                                @if (!String.IsNullOrWhiteSpace(variant.ShortDescription))
                                {
                                    <div class="variant-description">
                                        @Html.Raw(variant.ShortDescription)
                                    </div>
                                }
                                <!--SKU, MAN, GTIN, vendor-->
                                @await Html.PartialAsync("_SKU_Man_GTIN_Ven", variant)
                                <!--sample download-->
                                @await Html.PartialAsync("_DownloadSample", variant)
                                <!--attributes-->
                                @{
                                    var dataDictAttributes = new ViewDataDictionary(ViewData);
                                    dataDictAttributes.TemplateInfo.HtmlFieldPrefix = $"attributes_{variant.Id}";
                                    @await Html.PartialAsync("_ProductAttributes", variant.ProductAttributes, dataDictAttributes)
                                }
                                <!--gift card-->
                                @{
                                    var dataDictGiftCard = new ViewDataDictionary(ViewData);
                                    dataDictGiftCard.TemplateInfo.HtmlFieldPrefix = $"giftcard_{variant.Id}";
                                    @await Html.PartialAsync("_GiftCardInfo", variant.GiftCard, dataDictGiftCard)
                                }
                                <!--add to cart-->
                                @{
                                	var dataDictAddToCart = new ViewDataDictionary(ViewData);
                                    dataDictAddToCart.TemplateInfo.HtmlFieldPrefix = $"addtocart_{variant.Id}";
                                    @await Html.PartialAsync("_AddToCart", variant.AddToCart, dataDictAddToCart)
                                }
                                <!--wishlist-->
                                @{
                                	var dataDictAddToWishlist = new ViewDataDictionary(ViewData);
                                	dataDictAddToWishlist.TemplateInfo.HtmlFieldPrefix = $"addtocart_{variant.Id}";
                                    @await Html.PartialAsync("_AddToWishlist", variant.AddToCart, dataDictAddToWishlist)
                                }
                                <!--price breaks-->
                                @await Html.PartialAsync("_ProductTierPrices", variant.TierPrices)
                                <!--delivery-->
                                @await Html.PartialAsync("_DeliveryInfo", variant)
                            </div>
                        </div>
                    }
                    @if (Model.AssociatedProducts.Count == 0)
                    {
                        <div class="no-associated-products">
                            @T("Products.NoAssociatedProducts")
                        </div>
                    }
                </div>

                @{
                    var nopQuickTabsHtml = await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_before_collateral", additionalData = Model.Id });
                }

                @if (!String.IsNullOrEmpty(nopQuickTabsHtml.ToHtmlString()))
                {
                    var productsCarouselHtml = await Component.InvokeAsync("Widget", new { widgetZone = "productpage_after_collateral", additionalData = Model.Id });
                    var carouselQuickTabsWrapperClass = "one-column-wrapper";
                    if (!String.IsNullOrEmpty(productsCarouselHtml.ToHtmlString()))
                    {
                        carouselQuickTabsWrapperClass = "two-column-wrapper";
                    }

                    <div class="@carouselQuickTabsWrapperClass">
                        @nopQuickTabsHtml @*nop quick tabs*@

                        @productsCarouselHtml @*products carousel for related or also purchased with 1 visible item*@
                    </div>
                }
                <div class="product-collateral">
                    @await Html.PartialAsync("_ProductSpecifications", Model.ProductSpecifications)
                    @await Html.PartialAsync("_ProductTags", Model.ProductTags)
                </div>
                @*we do not display "also purchased" for grouped products
                @await Component.InvokeAsync("ProductsAlsoPurchased", new { productId = Model.Id })*@
                @await Component.InvokeAsync("RelatedProducts", new { productId = Model.Id })
            </div>
        </form>
        @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_bottom", additionalData = Model.Id })
    </div>
</div>
