@model HeaderLinksModel
@using Nop.Core
@using Nop.Core.Infrastructure
@using Nop.Services.Configuration
@using System.Text.Encodings.Web

@inject IStoreContext storeContext
@inject ISettingService settingService

@{
    var currentStore = storeContext.CurrentStore;
    var storeId = currentStore.Id;

    //Check if the setting ShowLoginPoup is true or false.
    bool shouldShowLoginInPopup = settingService.GetSettingByKey("PavilionThemeSettings.ShowLoginPopup", false, storeId, true);

    //Check if we should show the login popup.
    if(shouldShowLoginInPopup)
    {
        var reCaptchaVersion1 = "Version1";


        bool isReCaptchaV1EnabledOnLoginPage = (settingService.GetSettingByKey("captchasettings.enabled", false, storeId, true) &&
                                                settingService.GetSettingByKey("captchasettings.showonloginpage", false, storeId, true) &&
                                                (reCaptchaVersion1.Equals(settingService.GetSettingByKey("captchasettings.recaptchaversion", reCaptchaVersion1, storeId, true), StringComparison.InvariantCultureIgnoreCase)));

        // Since the LoginPopup is added via Ajax, reCaptcha v1 could not be loaded and won't work.
        // So we better not show the LoginPopup if reCaptcha v1 is enabled on the login page
        // http://stackoverflow.com/questions/23174979/google-recaptcha-doesnt-get-loaded-when-bootstrap-call-the-remote-modal
        if(isReCaptchaV1EnabledOnLoginPage)
        {
            shouldShowLoginInPopup = false;
        }else
        {
            bool isSSLEnabled = currentStore.SslEnabled;
            bool isSSLForcedOnAllPages = settingService.GetSettingByKey("securitysettings.forcesslforallpages", false, storeId, true);

            //Check if SSL is Enabled for Current Store and if it is forced for all pages so we do not show the Login Popup in that case. 
            bool isSSLEnabledAndNotForcedOnAllPages = isSSLEnabled && !isSSLForcedOnAllPages;

            if (isSSLEnabledAndNotForcedOnAllPages)
            {
                shouldShowLoginInPopup = false;
            }
        }
    }
}

<div class="header-links">
    <ul>
        @await Component.InvokeAsync("Widget", new { widgetZone = "header_links_before" })
        @if (Model.IsAuthenticated)
        {
            <li><a href="@Url.RouteUrl("CustomerInfo")" class="ico-account">@Model.CustomerName</a></li>
            <li><a href="@Url.RouteUrl("Logout")" class="ico-logout">@T("Account.Logout")</a></li>
        }
        else
        {
            <li><a href="@Url.RouteUrl("Register")" class="ico-register">@T("Account.Register")</a></li>
            <li><a href="@Url.RouteUrl("Login")" class="ico-login @if (shouldShowLoginInPopup){<text>modal-login</text>}" 
                   data-loginUrl="@Url.Action("Login", "Customer")">@T("Account.Login")</a></li>
        }
        @if (Model.AllowPrivateMessages)
        {
            var unreadMessagesCount = "0";
            if (!String.IsNullOrEmpty(Model.UnreadPrivateMessages)) {
                unreadMessagesCount = Model.UnreadPrivateMessages;
            }
            <li>
                <a href="@Url.RouteUrl("PrivateMessages", new { tab = "" })" class="ico-inbox">
                    <span class="inbox-label">@T("PrivateMessages.Inbox")</span>
                    <span class="inbox-unread">(@unreadMessagesCount)</span>
                </a>
            </li>
        }
        @if (Model.WishlistEnabled)
        {
            <li>
                <a href="@Url.RouteUrl("Wishlist")" class="ico-wishlist">
                    <span class="wishlist-label">@T("Wishlist")</span>
                    <span class="wishlist-qty">@T("Wishlist.HeaderQuantity", Model.WishlistItems)</span>
                </a>
            </li>
        }
        @*@if (Model.ShoppingCartEnabled)
        {
            <li id="topcartlink">
                <a href="@Url.RouteUrl("ShoppingCart")" class="ico-cart">
                    <span class="cart-label">@T("ShoppingCart")</span>
                    <span class="cart-qty">@T("ShoppingCart.HeaderQuantity", Model.ShoppingCartItems)</span>
                </a>
            </li>
        }*@
        @await Component.InvokeAsync("Widget", new { widgetZone = "header_links_after" })
    </ul>
    @if (Model.AllowPrivateMessages && !string.IsNullOrEmpty(Model.AlertMessage))
    {
        //new private message notification
        <script type="text/javascript">
            $(document).ready(function () {
                displayPopupNotification('@Html.Raw(JavaScriptEncoder.Default.Encode(Model.AlertMessage))', 'success', false);
            });
        </script>
    }
</div>
