@using Nop.Web.Models.Catalog

@model TopMenuModel

@{
    var isRtl = this.ShouldUseRtlTheme();
}


<style type="text/css">
    .top-menu li:hover > a{
        color:green !important;
        background-color:white !important;
        /*font-size:larger;*/
    }
    .top-menu {
        font-size:large !important;
    }
    /*.header-menu{
        width:90%;

    }*/
    
    #small-searchterms {
        color: black !important;
    }
    ::placeholder { /* Chrome, Firefox, Opera, Safari 10.1+ */
        color: black !important;
        opacity: .7; /* Firefox */
    }
    :-ms-input-placeholder { /* Internet Explorer 10-11 */
        color: black !important;
        opacity: .7;
    }

    ::-ms-input-placeholder { /* Microsoft Edge */
        color: black !important;
        opacity: .7;
    }
    
</style>


<input type="hidden" value="@isRtl.ToString().ToLowerInvariant()" id="isRtlEnabled" />

<ul class="top-menu">
    @await Component.InvokeAsync("Widget", new { widgetZone = "header_menu_before" })

    @if (Model.DisplayHomePageMenuItem)
    {
        <li><a href="@Url.RouteUrl("HomePage")">@T("HomePage")</a></li>
    }

    @{
        var rootCategories = Model.Categories.Where(x => x.IncludeInTopMenu).ToList();
    }
    @foreach (var category in rootCategories)
    {
        var categoryLineModel = new TopMenuModel.CategoryLineModel
        {
            Category = category
        };
        @await Html.PartialAsync("_CategoryLine.TopMenu", categoryLineModel)
    }
    @foreach (var topic in Model.Topics)
    {
        <li><a href="@Url.RouteUrl("Topic", new { SeName = topic.SeName })">@topic.Name</a></li>
    }
    @if (Model.NewProductsEnabled && Model.DisplayNewProductsMenuItem)
    {
        <li><a href="@Url.RouteUrl("NewProducts")">@T("Products.NewProducts")</a></li>
    }
    @if (Model.DisplayProductSearchMenuItem)
    {
        <li><a href="@Url.RouteUrl("ProductSearch")">@T("Search")</a></li>
    }
    @if (Model.DisplayCustomerInfoMenuItem)
    {
        <li><a href="@Url.RouteUrl("CustomerInfo")">@T("Account.MyAccount")</a></li>
    }
    @if (Model.BlogEnabled && Model.DisplayBlogMenuItem)
    {
        <li><a href="@Url.RouteUrl("Blog")">@T("Blog")</a></li>
    }
    @if (Model.ForumEnabled && Model.DisplayForumsMenuItem)
    {
        <li><a href="@Url.RouteUrl("Boards")">@T("Forum.Forums")</a></li>
    }
    @if (Model.DisplayContactUsMenuItem)
    {
        <li><a href="@Url.RouteUrl("ContactUs")">@T("ContactUs")</a></li>
    }

    @*@await Component.InvokeAsync("Widget", new { widgetZone = "header_menu_after" })
    <li><a href="consultations">@T("Consultant.ConsultantPage")</a></li>*@
</ul>

<script type="text/javascript" asp-location="Footer">
    (function($, ssCore) {

        $(document).ready(function () {

            ssCore.prepareTopMenu();
        });

    })(jQuery, sevenSpikesCore);
</script>