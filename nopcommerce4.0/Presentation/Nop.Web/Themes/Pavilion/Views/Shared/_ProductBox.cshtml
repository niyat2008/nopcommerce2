@model ProductOverviewModel
@using Nop.Core
@using Nop.Core.Domain.Catalog
@using Nop.Core.Domain.Orders
@using Nop.Core.Domain.Tax
@inject CatalogSettings catalogSettings
@inject IWorkContext workContext


@{
    //prepare "Add to cart" AJAX link
    var addtocartlink = "";
    var shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart;
    var quantity = 1;
    if (Model.ProductPrice.ForceRedirectionAfterAddingToCart)
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity, forceredirection = Model.ProductPrice.ForceRedirectionAfterAddingToCart });
    }
    else
    {
        addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity });
    }

    var addtowishlistlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = (int)ShoppingCartType.Wishlist, quantity = quantity });
    var addtocomparelink = Url.RouteUrl("AddProductToCompare", new { productId = Model.Id });
}











@*@{

    if (!string.IsNullOrEmpty(Model.ProductPrice.OldPrice) && !string.IsNullOrEmpty(Model.ProductPrice.Price))
    {
        try
        {
            var OldPrice = double.Parse(Model.ProductPrice.OldPrice.Substring(0, Model.ProductPrice.OldPrice.Length - 5));//Replace Rs. with configured Currency symbol i.e "$"
            var PriceRow = double.Parse(Model.ProductPrice.Price.Substring(0, Model.ProductPrice.Price.Length - 5));//Replace Rs. with configured Currency symbol i.e "$"

            if (PriceRow > 0 && OldPrice > 0)
            {
                var discountValue = OldPrice - PriceRow; // calculate the amount
                var discountPercentage = Math.Round(100 / (OldPrice / discountValue)); // calculate the percentage
                if (discountPercentage > 0)
                {
                    <div class="promotion"> <span style="background-color:red; color:white; font-size:medium; padding:1% 1% 1% 1%;" class="discount">@discountPercentage% خصم</span> </div>
                }
            }
        }
        catch { }
    }
}*@














<div class="product-item" data-productid="@Model.Id">

    @{

        if (!string.IsNullOrEmpty(Model.ProductPrice.OldPrice) && !string.IsNullOrEmpty(Model.ProductPrice.Price))
        {
            try
            {
                var OldPrice = double.Parse(Model.ProductPrice.OldPrice.Substring(0, Model.ProductPrice.OldPrice.Length - 5));//Replace Rs. with configured Currency symbol i.e "$"
                var PriceRow = double.Parse(Model.ProductPrice.Price.Substring(0, Model.ProductPrice.Price.Length - 5));//Replace Rs. with configured Currency symbol i.e "$"

                if (PriceRow > 0 && OldPrice > 0)
                {
                    var discountValue = OldPrice - PriceRow; // calculate the amount
                    var discountPercentage = Math.Round(100 / (OldPrice / discountValue)); // calculate the percentage
                    if (discountPercentage > 0)
                    {
                        <div style="text-align: right;position: relative;z-index: 10;width: 100%;bottom: 0px;left: 0px" class=""> 
                            <span dir="rtl" style="background-color: #f74258;       color: white;font-size: small;padding: 1% 1% 1% 1%;
       
        
       position: absolute; " class=""> خصم @discountPercentage%</span> </div> 
                    }
                }
            }
            catch { }
        }
    }

    <div class="picture">
        <a href="@Url.RouteUrl("Product", new { SeName = Model.SeName })" title="@Model.DefaultPictureModel.Title">
            <img alt="@Model.DefaultPictureModel.AlternateText" src="@Model.DefaultPictureModel.ImageUrl" title="@Model.DefaultPictureModel.Title" />
        </a>
    </div>
    @*@if (Model.ProductPrice.Discount > 0 && Model.IsRegistered)dont uncommentthis*@
    @*@if (!String.IsNullOrWhiteSpace(Model.ProductPrice.OldPrice))
        {

            <a class="ribbon-position top-right" data-productribbonid="3" data-productid="@Model.Id">
                <div class="product-ribbon" style="background: #f6f6f6;padding: 5px 15px;top: 15px;">*@

    @*<label class="ribbon-text" style="font-size: 13px;font-weight: bold;color: #f74258;">-@Model.ProductPrice.Discount%</label>dont uncommentthis*@
    @*<label class="ribbon-text" style="font-size: 13px;font-weight: bold;color: #f74258;">-@(string.Format("{0:00}%", (decimal.Parse(Model.ProductPrice.OldPrice) - decimal.Parse(Model.ProductPrice.Price))))</label>

                </div>
            </a>


        }*@
    <div class="details">
        @if (Model.ReviewOverviewModel.AllowCustomerReviews)
        {
            var ratingPercent = 0;
            if (Model.ReviewOverviewModel.TotalReviews != 0)
            {
                ratingPercent = ((Model.ReviewOverviewModel.RatingSum * 100) / Model.ReviewOverviewModel.TotalReviews) / 5;
            }
            <div class="product-rating-box" title="@string.Format(T("Reviews.TotalReviews").Text, Model.ReviewOverviewModel.TotalReviews)">
                <div class="rating">
                    <div style="width: @(ratingPercent)%">
                    </div>
                </div>
            </div>
        }
        <div class="attribute-squares-wrapper"></div>
        <div class="product-title"  style="font-size: 30px; font-weight: bold; height: auto !important; ">
            <a href="@Url.RouteUrl("Product", new { SeName = Model.SeName })">@Model.Name</a>
        </div>
        @if (catalogSettings.ShowSkuOnCatalogPages && !string.IsNullOrEmpty(Model.Sku))
        {
            <div class="sku">
                @Model.Sku
            </div>
            //amsfci
        }
        <div class="add-info">
            @*@await Component.InvokeAsync("Widget", new { widgetZone = "productbox_addinfo_before", additionalData = Model.Id })*@
            @*@if (Model.IsRegistered)
                {*@
            <div class="prices">
                @*<span class="price actual-price">@Model.ProductPrice.PriceWithDiscount</span>
                    @if (Model.ProductPrice.Price != Model.ProductPrice.PriceWithDiscount)*@
                <span class="price actual-price">@Model.ProductPrice.Price</span>

                @*@if (!string.IsNullOrEmpty(Model.ProductPrice.OldPrice))
                    {
                        <span class="price old-price">@Model.ProductPrice.OldPrice</span>
                    }*@

                @*<span class="price base-price">@Model.ProductPrice.PriceWithDiscount</span>*@
                @*@if (Model.ProductPrice.DisplayTaxShippingInfo)
                    {
                        var inclTax = workContext.TaxDisplayType == TaxDisplayType.IncludingTax;
                        //tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
                        //of course, you can modify appropriate locales to include VAT info there
                        <span class="tax-shipping-info">
                            @T(inclTax ? "Products.Price.TaxShipping.InclTax" : "Products.Price.TaxShipping.ExclTax", Url.RouteUrl("Topic", new { SeName = Html.GetTopicSeName("shippinginfo") }))
                        </span>
                    }
                    @if (!String.IsNullOrEmpty(Model.ProductPrice.BasePricePAngV))
                    {
                        <span class="price base-price">@Model.ProductPrice.BasePricePAngV</span>
                    }*@
            </div>
            @*}*@

            @await Component.InvokeAsync("Widget", new { widgetZone = "productbox_addinfo_middle", additionalData = Model.Id })

            <div class="description">
                @Html.Raw(Model.ShortDescription)
            </div>

            
            @*@if (Model.IsRegistered)
                {*@
            <div class="buttons-lower">
                @if (!Model.ProductPrice.DisableBuyButton)
                {
                    var addToCartText = T("ShoppingCart.AddToCart").Text;
                    if (Model.ProductPrice.IsRental)
                    {
                        addToCartText = T("ShoppingCart.Rent").Text;
                    }
                    if (Model.ProductPrice.AvailableForPreOrder)
                    {
                        addToCartText = T("ShoppingCart.PreOrder").Text;
                    }
                    <button type="button" class="button-2 product-box-add-to-cart-button" onclick="AjaxCart.addproducttocart_catalog('@addtocartlink');return false;"><span>@(addToCartText)</span></button>
                }
            </div>
            @*}*@
            @await Component.InvokeAsync("Widget", new { widgetZone = "productbox_addinfo_after", additionalData = Model.Id })
        </div>
    </div>
</div>







