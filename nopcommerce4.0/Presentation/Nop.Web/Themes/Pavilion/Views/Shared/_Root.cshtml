@using Nop.Core
@using Nop.Services.Configuration

@inject IStoreContext storeContext
@inject ISettingService settingService
@{
    Layout = "_Root.Head";

    var controllerName = Url.ActionContext.RouteData.Values["controller"].ToString();
    var actionName = Url.ActionContext.RouteData.Values["action"].ToString();
    var isHomePage = controllerName.Equals("home", StringComparison.InvariantCultureIgnoreCase) && actionName.Equals("index", StringComparison.InvariantCultureIgnoreCase);

    var storeId = storeContext.CurrentStore.Id;
    bool isLogoStickyOnMobileDevice = settingService.GetSettingByKey("pavilionthemesettings.islogostickyonmobiledevice", false, storeId, true);
    string stickyLogoClass = isLogoStickyOnMobileDevice ? "mobile-sticky-logo" : string.Empty;
}

@await Component.InvokeAsync("Widget", new { widgetZone = "body_start_html_tag_after" })
@await Html.PartialAsync("_Notifications")
@await Html.PartialAsync("_JavaScriptDisabledWarning")
@await Html.PartialAsync("_OldInternetExplorerWarning") 
<div class="master-wrapper-page @stickyLogoClass">
    @await Html.PartialAsync("_Header")
    <script type="text/javascript" asp-location="Footer">
        AjaxCart.init(false, '.header-links .cart-qty', '.header-links .wishlist-qty', '#flyout-cart');
    </script>
    <div class="overlayOffCanvas"></div>
    <div class="responsive-nav-wrapper-parent">
        <div class="responsive-nav-wrapper">
            <div class="menu-title">
                <span>@T("SevenSpikes.Themes.Common.MenuTitle")</span>
            </div>
            <div class="shopping-cart-link">
                <span>@T("ShoppingCart")</span>
            </div>
            <div class="filters-button">
                <span>@T("SevenSpikes.Themes.Common.Filters")</span>
            </div>
            <div class="personal-button" id="header-links-opener">
                <span>@T("SevenSpikes.Themes.Common.Personal")</span>
            </div>
            <div class="preferences-button" id="header-selectors-opener">
                <span>@T("SevenSpikes.Themes.Pavilion.Header.Preferences")</span>
            </div>

            <div class="search-wrap">
                <span>@T("Search")</span>
            </div>

        </div>
    </div>
    <div class="master-wrapper-content">
        @await Component.InvokeAsync("Widget", new { widgetZone = "content_before" })
        @await Component.InvokeAsync("Widget", new { widgetZone = "pavilion_color_squares" })

        @if (IsSectionDefined("Breadcrumb"))
        {
            @RenderSection("Breadcrumb")
        }
        <div class="master-column-wrapper">
            @RenderBody()
        </div>
        @await Component.InvokeAsync("Widget", new { widgetZone = "content_after" })
    </div>
    @if (isHomePage)
    {
        @await Component.InvokeAsync("Widget", new { widgetZone = "homepage_content_after" })
    }

    @await Component.InvokeAsync("Footer")
</div>

@await Component.InvokeAsync("EuCookieLaw")
@await Component.InvokeAsync("Widget", new { widgetZone = "body_end_html_tag_before" })
